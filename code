ssh -- ssh-keygen == public + prviate
public key to be shared ssh-copy-id username@ip-address
whenerver other machne want to connect == public and master will evaluvate with pvt key 
configuration on master:
========================
login as jenkinsadmin on your master machine

useradd jenkinsadmin
passwd jenkinsadmin = pass123

jenkinsadmin  ALL=(ALL)       NOPASSWD: ALL
cd /etc/ssh - nano sshd_config == > PasswordAuthentication yes
service sshd reload/service sshd restart
su jenkinsadmin 

configuration on slave:
========================
login as jenkinsadmin on your slave machine

useradd jenkinsadmin
passwd jenkinsadmin = pass123

visudo == jenkinsadmin ALL=(ALL)       ALL
cd /etc/ssh - nano sshd_config == > PasswordAuthentication yes
service sshd reload/service sshd restart
su jenkinsadmin 

ssh 'jenkinsadmin@172.31.81.110'


///////////////////////////////////////////////////////
Take Amazon-linux-2023 latest version and install java + jenkins + maven 
========================================================================
1. Upgrade your system (optional - If available)
yum update -y 
dnf upgrade --releasever=2023.3.20240205

2. Install java -- > Check java -version
sudo dnf install java-11-amazon-corretto-devel

3. Install Jenkins using the below commands
    1  sudo wget -O /etc/yum.repos.d/jenkins.repo     https://pkg.jenkins.io/redhat-stable/jenkins.repo
    2  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
	3  sudo yum install jenkins
    4  sudo systemctl daemon-reload
	5  service jenkins start
	6  systemctl enable jenkins

4. Install maven for build
    1. cd /opt
	2. wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.zip
	3. unzip apache-maven-3.9.6-bin.zip
	4. rm -rf apache-maven-3.9.6-bin.zip
	5. mv apache-maven-3.9.6/ maven
	
5. Configure path variable " echo $PATH" to add java_home  and maven_home

==> cd ==> ls -la ==> nano .bash_profile
=======================================================================
# .bash_profile
# Get the aliases and functions
if [ -f ~/.bashrc ]; then
        . ~/.bashrc
fi

M2_HOME=/opt/maven
M2=/opt/maven/bin
JAVA_HOME=/usr/lib/jvm/java-11-amazon-corretto.x86_64

# User specific environment and startup programs

PATH=$PATH:$HOME/bin:$JAVA_HOME:$M2_HOME:$M2

export PATH
=======================================================================
==> source .bash_profile
==> echo $PATH
////////////////////////////////////////////////////////////////////////


EC2 + VPC TERRAFORM
resource "aws_vpc" "my_vpc" {
  cidr_block = "172.16.0.0/16"

  tags = {
    Name = "tf-example"
  }
}

resource "aws_subnet" "my_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "172.16.10.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name = "tf-example"
  }
}

resource "aws_network_interface" "foo" {
  subnet_id   = aws_subnet.my_subnet.id
  private_ips = ["172.16.10.100"]

  tags = {
    Name = "primary_network_interface"
  }
}

resource "aws_instance" "foo" {
  ami           = "ami-0e1d30f2c40c4c701"
  instance_type = "t2.micro"

  network_interface {
    network_interface_id = aws_network_interface.foo.id
    device_index         = 0
  }

  credit_specification {
    cpu_credits = "unlimited"
  }
}
/////////////////////////////////////////////////////

1. Spin a EC2 instance and login .
Become a root user

2. Install Java : sudo dnf install java-11-amazon-corretto-devel

3. Install tomcat :
cd /opt
https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.85/bin/apache-tomcat-9.0.85.zip
unzip apache-tomcat-9.0.85.zip
rm -rf apache-tomcat-9.0.85.zip
mv apache-tomcat-9.0.85 tomact

cd tomcat/bin
chmod +x startup.sh
chmod +x shutdown.sh
chmod 777 catalina.sh

./shutdown.sh
./startup.sh
chown -R ec2-user:ec2-user tomcat

check your machine on port <public-ip>:8080
find / -name context.xml
nano /opt/tomcat/conf/context.xml
nano /opt/tomcat/webapps/examples/META-INF/context.xml
nano /opt/tomcat/webapps/host-manager/META-INF/context.xml
nano /opt/tomcat/webapps/manager/META-INF/context.xml
cd ..
cd conf/
nano tomcat-users.xml

<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<role rolename="manager-jmx"/>
<role rolename="manager-status"/>
<user username="tomcat" password="pass123" roles="manager-gui"/>
<user username="admin" password="admin123" roles="manager-gui, manager-script, manager-jmx, manager-status"/>

./shutdown.sh
./startup.sh ==> Tomcat should be up and running.


===============================================================
Create a new java - maven web app project using on jenkins server :


mvn archetype:generate -DgroupId=com.sample.webproject -DartifactId=SampleWebApp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false

Once the files are created push them to new github repository
///////////////////////////////////////////////////////////////////////////Class 22- https://tomcat.apache.org/download-10.cgi TOMCAT
1. Spin a EC2 instance and login .
Become a root user

2. Install Java : sudo dnf install java-11-amazon-corretto-devel

3. Install tomcat :
cd /opt
https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.85/bin/apache-tomcat-9.0.85.zip
unzip apache-tomcat-9.0.85.zip
rm -rf apache-tomcat-9.0.85.zip
mv apache-tomcat-9.0.85 tomact

cd tomcat/bin
chmod +x startup.sh
chmod +x shutdown.sh
chmod 777 catalina.sh

./shutdown.sh
./startup.sh
chown -R ec2-user:ec2-user tomcat

check your machine on port <public-ip>:8080
find / -name context.xml
nano /opt/tomcat/conf/context.xml
nano /opt/tomcat/webapps/examples/META-INF/context.xml
nano /opt/tomcat/webapps/host-manager/META-INF/context.xml
nano /opt/tomcat/webapps/manager/META-INF/context.xml
cd ..
cd conf/
nano tomcat-users.xml

<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<role rolename="manager-jmx"/>
<role rolename="manager-status"/>
<user username="tomcat" password="pass123" roles="manager-gui"/>
<user username="admin" password="admin123" roles="manager-gui, manager-script, manager-jmx, manager-status"/>

./shutdown.sh
./startup.sh ==> Tomcat should be up and running.


===============================================================
Create a new java - maven web app project using on jenkins server :


mvn archetype:generate -DgroupId=com.sample.webproject -DartifactId=SampleWebApp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false

Once the files are created push them to new github repository
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
# Setup Kubernetes (K8s) Cluster on AWS

1. Create AWS Amazon EC2 instance (Free one)
2. yum update -y
3. aws --version (check the aws version installed)
4. Install kubectl on Amzon Linux instance
    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    sudo mv ./kubectl /usr/local/bin/kubectl
    kubectl version

5. Install kops on Amzon Linux instance
	curl -LO  https://github.com/kubernetes/kops/releases/download/1.15.0/kops-linux-amd64
    chmod +x kops-linux-amd64
    sudo mv kops-linux-amd64 /usr/local/bin/kops
    kops version

6. Create an IAM role  with administrator access and Attach IAM role to k8s-mgmt-node instance
7. Create an S3 bucket with unique name (k8s.morning.demo.net)
8. Create a Route53 private hosted zone (demo.net) (you can create Public hosted zone if you have a domain)

9. Expose environment variable:    export KOPS_STATE_STORE=s3://k8s.morning.demo.net 

10. Create sshkeys before creating cluster for private and public key : ssh-keygen

11. Create kubernetes cluster definitions on S3 bucket
   kops create cluster --cloud=aws --zones=us-east-1a --name=k8s.morning.demo.net --dns-zone=demo.net --dns private

12. Edit your node instance group change instance type to t2.micro : kops edit ig --name=k8s.morning.demo.net nodes
13. Edit your master instance group change instance type to t2.micro : kops edit ig --name=k8s.morning.demo.net master-us-east-1a

14. Create kubernetes cluser
    kops update cluster --name k8s.morning.demo.net --yes

15. Validate your cluster after 10 mins :  kops validate cluster

16. list nodes: kubectl get nodes --show-labels

17. ssh to the master: ssh -i ~/.ssh/id_rsa admin@api.k8s.morning.demo.net 
18. Upgrade as root : sudo su -

19. To list nodes :   kubectl get all

20. To delete cluster :  kops delete cluster k8s.morning.demo.net --yes

   
#### Deploying Nginx pods on Kubernetes
1. Deploying Nginx Container
    kubectl run sample-nginx --image=nginx --replicas=2 --port=80
    kubectl get pods
    kubectl get deployments

2. Expose the deployment as service.
   kubectl expose deployment sample-nginx --port=80 --type=LoadBalancer
   kubectl get services -o wide

  https://github.com/kubernetes/kops/blob/master/docs/terraform.md
